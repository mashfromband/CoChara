// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js関連のモデル
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  birthYear     Int?
  birthMonth    Int?
  accounts      Account[]
  sessions      Session[]
  characters    Character[]
  eggCollection EggCollection[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// アプリケーション固有のモデル
model Character {
  id              String    @id @default(cuid())
  name            String
  eggTypeId       String
  stats           Json      // CharacterStatsをJSON形式で保存
  evolutionHistory Json[]   // CharacterEvolution[]をJSON形式で保存
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  ownerId         String
  sharedWith      String[]  // 共有されているユーザーIDの配列
  owner           User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  contents        ContentItem[]
}

model ContentItem {
  id          String   @id @default(cuid())
  type        String   // 'music' | 'video' | 'article' | 'image' | 'other'
  url         String
  title       String
  description String?
  tags        String[]
  genre       String?
  addedAt     DateTime @default(now())
  addedBy     String
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model EggCollection {
  id        String   @id @default(cuid())
  userId    String
  eggTypeId String
  obtainedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eggTypeId])
}
